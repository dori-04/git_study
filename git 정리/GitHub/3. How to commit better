어떻게 커밋하는게 좋을까
하나의 커밋에는 한 단위의 작업을 넣자.(한 작업을 여러버전으로 쪼개거나, 여러 작업을 하나의 버전으로 뭉치면 안 됨)
커밋 메시지는 어떤 작업이 이뤄졌는지 알아볼 수 있도록 작성하자.

널리 사용되는 커밋 메시지 작성방식
type: subject

body (optional)
...
...
...

footer (optional)

(예시)
feat: 압축파일 미리보기 기능 추가

사용자의 편의를 위해 압축을 풀기 전에
다음과 같이 압축파일 미리보기를 할 수 있도록 함
 - 마우스 오른쪽 클릭
 - 윈도우 탐색기 또는 맥 파인더의 미리보기 창

Closes #125

Type 예시
feat: 새로운 기능 추가
fix: 버그 수정
docs: 문서 수정
style: 공백, 세미콜론 등 스타일 수정
refactor: 코드 리팩토링
perf: 성능 개선
test: 테스트 추가
chore: 빌드 과정 또는 보조 기능(문서 생성기능 등) 수정
Subject: 커밋의 작업 내용 간략히 설명
Body: 길게 설명할 필요가 있을 시 작성
Footer: Breaking point가 있을 때, 특정 이슈에 대한 해결 작업일 때

https://gitmoji.dev/ 사이트를 이용한다면 type부분에 이모지를 사용할 수 있다.

보다 세심하게 스테이징하고 커밋하기
git add –p를 통해서 일부만 스테이징할 수 있다.
git commit –v을 통해서 일부만 커밋할 수 있다.
-> 이런 형식을 거친다면 로컬에서 한번에 같은 파일에서 수정한 내용이어도 다른 version으로 만들 수 있다.
git diff —staged(이번 commit에 담길 변경사항들 모아서 보여주기)와 commit기능을 합친게 git commit –v이다.