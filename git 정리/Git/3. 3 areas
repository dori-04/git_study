시간 여행하기 
git status: 변경사항 확인하기
** untracked file= git의 관리에 들어간 적 없는 파일
git add 파일명: git에게 관리를 맡김
git add .: 모든 파일의 관리를 git에게 맡김
git commit: Vi 입력 모드로 진입 -> i누르고 입력시작 -> commit 이름 적고 :wq 입력해서 빠져나오기
추가 명령어, :q 저장 없이 종료 / :q! 입력한 것이 있을 때 사용 / :wq 입력한 것이 있을 때 사용 / k 위로 스크롤 / j 아래로 스크롤
그냥 git commit –m “(커밋 이름)”를 통해서도 커밋할 수 있다.(커밋 = create new version)
git commit –am “(커밋 이름)”은 add와 commit을 합친 명령어로 untracked file이 없을 때만 사용가능하다.
git log를 사용하여 CLI에서 변경사항을 확인하거나 소스트리를 사용하여 GUI에서 변경사항을 확인할 수 있다.

git의 3가지 공간
working directory -(add)-> staging area -(commit)-> repository
working directory에는 untracked file과 tracked file이 있다. untracked file은 Add된 적이 없는 파일이거나 ignore된 파일이다. tracked file은 Add 된적이 있고, 변경내용이 있는 파일이다. 즉, 이미 commit되어 repository에 있는 file 안에서 수정했을 때, 그 file이 tracked file의 형태로 working directory에 들어가게 된다.
여기서 git add 명령어로 staging area로 이동시킬 수 있다.
Staging area: commit을 위한 준비 단계
git commit 명령어로 repository로 이동시킬 수 있다.
뒤로 가기
git restore —staged (파일명)을 이용해서 staging aread서 working directory로 이동시킬 수 있다.
git restore을 이용하면 working directory에서 제거할 수 있다.

커밋하지 않은 변경사항 되돌리기
git restore: 특정 파일을 지정된 상태로 복구
워킹 디렉토리의 특정 파일을 복구 : git restore (파일명)
변경상태를 스테이지에서 워킹 디렉토리로 돌려놓기 : git restore —staged(파일명)
파일을 특정 커밋의 상태로 되돌리기 : git restore —source=(헤드 또는 커밋 해시)파일명

관리하지 않는 파일들 삭제하기
git clean을 사용하여 삭제할 수 있다.
-n: 삭제될 파일들 보여주기 / -i: 인터렉티브 모드 시작 / -d: 폴더 포함 / -f: 강제로 바로 지워버리기 / -x: .gitignore에 등록된 파일들도 삭제
위의 옵션들을 조합하여 사용할 수 있다. untracked file에만 통하는 것 tracked file에는 통하지 않는다.
조합해서 사용할 수도 있다. 보통은 -df로 사용한다. 